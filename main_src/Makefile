# $Id$
#
# Grand Unified CLAVR-x Makefile.
#
# vim:tw=0:noexpandtab:ts=8:
#
############################## Makefile Settings ###############################

#--- attributes written to hdf files to describe data
#Title_String = " PATMOS-x AVHRR reflectance, brightness temperature and cloud product CDRs"
#Calibration_String = "mc5y2011"
#Institution_String = " NOAA/NESDIS and the University of Wisconsin-Madison / CIMSS"
#Product_Version_String = "v05r03"
#Program_String = " NOAA Climate Data Record Program for satellites"
#Status_String = " Interim"
#Summary_String = " Included in this file are PATMOS-x/CLAVR-x calibrated reflectance, brightness temperature and cloud products developed by NOAA in collaboration with the University of Wisconsin-Madison CIMSS"
#Variable_String = " refl_0_65um_nom, refl_0_86um_nom, refl_1_60um_nom, refl_3_75um_nom, temp_3_75um_nom, temp_11_0um_nom, temp_12_0um_nom, cld_temp_acha, cld_emiss_acha, cld_opd_dcomp, cld_reff_dcomp"
#Keywords_String = "EARTH SCIENCE > LAND SURFACE > SURFACE RADIATIVE PROPERTIES > REFLECTANCE, EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > REFLECTANCE, EARTH SCIENCE > SPECTRAL/ENGINEERING > INFRARED WAVELENGTHS > BRIGHTNESS TEMPERATURE, EARTH SCIENCE > SPECTRAL/ENGINEERING > SENSOR #CHARACTERISTICS > VIEWING GEOMETRY"
#Keywords_Vocabulary_String = "NASA Global Change Master Directory (GCMD) Earth Science Keywords, Version 8.0"
#Metadata_Link_String = "gov.noaa.ncdc:C00837 gov.noaa.ncdc.C00840"
#Time_Coverage_Resolution_String = "P1D"
#Spatial_Resolution_String = "0.1 x 0.1 degree equal-angle grid"

#--- attributes written to hdf files to describe data
Title_String = " PATMOS-x "
Calibration_String = "mc5y2011"
Institution_String = " NOAA/NESDIS and the University of Wisconsin-Madison / CIMSS"
Product_Version_String = "v05r04"
Program_String = " NOAA Climate Data Record Program for satellites"
Status_String = " Interim"
Summary_String = " To add"
Variable_String = " To add "
Keywords_String = " To add "
Keywords_Vocabulary_String = " To add "
Metadata_Link_String = " To add "
Time_Coverage_Resolution_String = "  To add"
Spatial_Resolution_String = " To add "


# Include the configuration file generated by the configure script.
#
# History:
#   6.5.3  Added ned VIIRS read routine (AW 2013/03/21 )
#
#
include config.mk

INC_DNCOMP = -I$(DNCOMP)
fflags += $(INC_DNCOMP)
#ccm following line
fflags0 += $(INC_DNCOMP)

fflags_clavr=

ifdef hdf5libs
     fflags_clavr += -DHDF5LIBS
endif

ifdef nlcomplibs
     fflags_clavr += -DNLCOMP
     fflags_clavr += -DNLCOMPLIBS
     INC_NLCOMP = -I$(DNLCOMP)
      fflags += $(INC_DNLCOMP)
#ccm following line
      fflags0 += $(INC_DNLCOMP)
endif

#-----------------------------------------------------------------------------
#                          -- Find other source code directories --
#-----------------------------------------------------------------------------
VPATH = ./pfast:$(ACHA):$(BASE):$(CCL):$(ASOS):$(CTYPE):$(CMASK):$(BASELINEMASK):$(SASRAB):$(PFAAST)

SHELL = /bin/sh
.SUFFIXES:
.SUFFIXES: .f90 .F .o

#Preprocessor flag for CLAVR-x
CLAVRX_ID_FLAG = -DISCLAVRX

#Compilation rule for f90 files
.f90.o:
	$(fc) -c $(fflags) $(cppflags) $(cppflags_vcld) $(fflags_clavr) $(CLAVRX_ID_FLAG) $(cpp) $<

#Compilation rule for F files (needed for AIX compilation)
.F.o:
	$(fc) -c $(fflags) $(cppflags) $(cppflags_vcld) $(cpp) $<

#--- hardwire C compiler
CC = gcc

#Declaration of phony targets.
.PHONY: all clean distclean

#Default target is to build all executables.
all: dncomp clavrxorb comp_asc_des_level2b drive_subset_level2b

################################# Executables ##################################

#Core CLAVR-x routines
clavrxorb_objs = process_clavrx.o \
                 pixel_common.o \
                 avhrr_module.o \
                 pixel_routines.o \
                 clavrx_olr_module.o \
                 clavrx_sst_module.o \
                 num_mod.o \
                 planck.o \
                 sfc_prop_umd.o \
                 cgms_nav.o \
                 file_utility.o \
                 scaling_params.o \
                 hdf.o \
                 netcdf_read_module.o \
                 oisst_analysis.o \
                 constant.o \
                 calibration_constants.o \
                 algorithm_constants.o \
                 acha_module.o \
		 acha_clavrx_services_module.o \
		 acha_clavrx_bridge_module.o \
                 acha_comp_module.o \
                 acha_shadow_module.o \
                 cloud_base_module.o \
		 cloud_base_clavrx_bridge_module.o \
		 cloud_base_clavrx_services_module.o \
	         cloud_height_routines.o \
                 ccl_module.o \
		 ccl_clavrx_services_module.o \
		 ccl_clavrx_bridge_module.o \
                 asos_module.o \
		 asos_clavrx_bridge_module.o \
		 asos_clavrx_services_module.o \
	         file_tools.o \
	         clavrx_message_module.o \
	         land_sfc_properties.o \
	         avhrr_pixel_aerosol.o \
                 hdf_params.o \
                 level2.o \
	         sort_module.o \
                 gfs_hdf_module.o \
	         nwp_common.o \
                 ncep_reanalysis.o \
                 sfc_emiss.o \
	         rt_utils.o  \
                 rtm_common.o \
	         Message_Handler.o \
	         Compare_Float_Numbers.o \
	         hdf_read_module.o \
                 flip_rtc.o \
                 re4flip.o \
                 big_endian.o \
                 get_lun.o \
                 seviri_module.o \
	         oca_module.o \
	         reposnx.o \
                 reposition_module.o \
		 dcomp_derived_products_module.o \
                 nb_cloud_mask_clavrx_bridge_module.o \
                 nb_cloud_mask_clavrx_services_module.o \
		 nb_cloud_mask_module.o \
                 nb_cloud_mask_addons_module.o \
                 baseline_cloud_mask.o \
                 move_bytes.o \
	         mreadf.o \
	         modis_module.o \
	         iff_clavrx_bridge.o \
	         iff_module.o \
                 goes_module.o   \
                 mtsat_module.o \
                 fy2_module.o \
                 coms_module.o \
                 dnb_retrievals_mod.o \
		 dncomp_clavrx_bridge_mod.o \
		 dcomp_rtm_module.o \
                 globsnow_read_routines.o \
	         laszlo_insolation_module.o \
                 conver.o \
                 sasrab.o \
                 getmod.o \
                 sensor_module.o \
                 simple_cod_module.o \
                 level2b.o \
                 user_options.o \
                 ir_cloud_type_baum_module.o \
                 cloud_type_bridge_module.o \
                 cloud_type_algo_module.o \
                 viewing_geometry_module.o \
                 ahi_clavrx_bridge.o \
                 cx_read_ahi_mod.o \
                 string_functions.o \
                 date_tools_mod.o \
                 geos_transform_pix.o \
                 cx_pfaast_mod.o \
                 cx_pfaast_tools_mod.o \
                 cx_pfaast_coef_mod.o \
                 cx_pfaast_constants_mod.o \
                 strings.o \
                 geo_sat_navigation_mod.o \
                 precision.o

#Level2b routines
comp_asc_des_level2b_objs = comp_asc_des_level2b.o \
                            hdf.o \
		            hdf_params.o \
                            level2b.o \
                            num_mod.o \
                            file_utility.o \
                            constant.o

#Level2b subsetting routines
drive_subset_level2b_objs = drive_subset_level2b.o \
                            hdf.o \
		                    hdf_params.o \
                            level2b.o \
                            num_mod.o \
                            file_utility.o \
                            constant.o

  CLAVRX_OBJ_FILES = $(clavrxorb_objs)

dncomp:
	$(MAKE)  -C $(DNCOMP) 
	

clavrxorb: $(clavrxorb_objs) bindir
ifdef hdf5libs
   ifdef nlcomplibs
	   $(fc) $(ldflags) -o ../clavrx_bin/clavrxorb $(CLAVRX_OBJ_FILES) readh5dataset.o viirs_clavrx_bridge.o viirs_read_mod.o viirs_nasa_read_module.o  $(netcdflibs) ${hdf5libs} $(hdflibs) ${hdf5links} ${dncomplibs} ${dncomplinks} ${nlcomplibs} ${nlcomplinks}
   else
	   $(fc) $(ldflags) -o ../clavrx_bin/clavrxorb $(CLAVRX_OBJ_FILES) readh5dataset.o viirs_clavrx_bridge.o viirs_read_mod.o viirs_nasa_read_module.o  $(netcdflibs) ${hdf5libs} $(hdflibs) ${hdf5links} ${dncomplibs} ${dncomplinks}
   endif   
else
	$(fc) $(ldflags) -o ../clavrx_bin/clavrxorb $(CLAVRX_OBJ_FILES) $(netcdflibs) $(hdflibs) ${dncomplibs} ${dncomplinks}  
endif

comp_asc_des_level2b: $(comp_asc_des_level2b_objs) bindir
	$(fc) $(ldflags) -o ../clavrx_bin/comp_asc_des_level2b $(comp_asc_des_level2b_objs) $(hdflibs)

drive_subset_level2b: $(drive_subset_level2b_objs) bindir
	$(fc) $(ldflags) -o ../clavrx_bin/drive_subset_level2b $(drive_subset_level2b_objs) $(hdflibs)
version.inc: Makefile
	echo ' Title_String = $(Title_String)' > version.inc
	echo ' Calibration_String = $(Calibration_String)' >> version.inc
	echo ' Institution_String = $(Institution_String)' >> version.inc
	echo ' Product_Version_String = $(Product_Version_String)' >> version.inc
	echo ' Program_String = $(Program_String)' >> version.inc
	echo ' Status_String = $(Status_String)' >> version.inc
	echo ' Summary_String = $(Summary_String)' >> version.inc
	echo ' Variable_String = $(Variable_String)' >> version.inc
	echo ' Keywords_String = $(Keywords_String)' >> version.inc
	echo ' Keywords_Vocabulary_String = $(Keywords_Vocabulary_String)' >> version.inc
	echo ' Metadata_Link_String = $(Metadata_Link_String)' >> version.inc
	echo ' Time_Coverage_Resolution_String = $(Time_Coverage_Resolution_String)' >> version.inc
	echo ' Spatial_Resolution_String = $(Spatial_Resolution_String)' >> version.inc
bindir:
	$(shell test ! -d ../clavrx_bin && mkdir ../clavrx_bin)
################################# Source Files #################################

#The convert big endian flag is only needed for the OISST module, hence the special compilation
#instuctions

oisst_analysis.o: oisst_analysis.f90 pixel_common.o constant.o file_utility.o hdf.o num_mod.o
	        $(fc)  -c $(fflags) $(beconv) $(cppflags) $(cppflags_vcld) $(cpp) oisst_analysis.f90

constant.o: constant.f90
algorithm_constants.o: algorithm_constants.f90 constant.o
avhrr_pixel_aerosol.o: avhrr_pixel_aerosol.f90 pixel_common.o constant.o file_utility.o

#acha & cloud base
acha_clavrx_services_module.o: acha_clavrx_services_module.f90 pixel_common.o nwp_common.o \
                     rtm_common.o constant.o planck.o rtm_common.o num_mod.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ACHA)/acha_clavrx_services_module.f90                    

acha_clavrx_bridge_module.o: acha_clavrx_bridge_module.f90 acha_module.o acha_comp_module.o \
                  acha_shadow_module.o acha_clavrx_services_module.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ACHA)/acha_clavrx_bridge_module.f90                    

acha_module.o: acha_module.f90 acha_clavrx_services_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ACHA)/acha_module.f90

acha_comp_module.o: acha_comp_module.f90 acha_clavrx_services_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ACHA)/acha_comp_module.f90

acha_shadow_module.o: acha_shadow_module.f90
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ACHA)/acha_shadow_module.f90

cloud_base_clavrx_bridge_module.o: cloud_base_clavrx_bridge_module.f90  cloud_base_module.o cloud_base_clavrx_services_module.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(BASE)/cloud_base_clavrx_bridge_module.f90                    

cloud_base_clavrx_services_module.o: cloud_base_clavrx_services_module.f90 pixel_common.o nwp_common.o \
                     rtm_common.o constant.o planck.o rtm_common.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(BASE)/cloud_base_clavrx_services_module.f90                    

cloud_base_module.o: cloud_base_module.f90 cloud_base_clavrx_services_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(BASE)/cloud_base_module.f90

ccl_clavrx_services_module.o: ccl_clavrx_services_module.f90 pixel_common.o nwp_common.o \
                     rtm_common.o constant.o planck.o rtm_common.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(CCL)/ccl_clavrx_services_module.f90                    

ccl_clavrx_bridge_module.o: ccl_clavrx_bridge_module.f90 ccl_module.o ccl_clavrx_services_module.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(CCL)/ccl_clavrx_bridge_module.f90                    

ccl_module.o: ccl_module.f90 ccl_clavrx_services_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(CCL)/ccl_module.f90

asos_clavrx_services_module.o: asos_clavrx_services_module.f90 pixel_common.o constant.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ASOS)/asos_clavrx_services_module.f90                    

asos_clavrx_bridge_module.o: asos_clavrx_bridge_module.f90 asos_module.o asos_clavrx_services_module.o 
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ASOS)/asos_clavrx_bridge_module.f90                    

asos_module.o: asos_module.f90 asos_clavrx_services_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(ASOS)/asos_module.f90

dcomp_derived_products_module.o: dcomp_derived_products_module.f90 constant.o pixel_common.o nwp_common.o
avhrr_module.o: avhrr_module.f90 constant.o pixel_common.o viewing_geometry_module.o planck.o calibration_constants.o mreadf.o file_utility.o
user_options.o: user_options.f90 constant.o pixel_common.o file_utility.o clavrx_message_module.o level2b.o
pixel_common.o: pixel_common.f90 constant.o clavrx_message_module.o
pixel_routines.o: pixel_routines.f90 constant.o num_mod.o pixel_common.o nwp_common.o planck.o algorithm_constants.o land_sfc_properties.o sfc_prop_umd.o file_utility.o calibration_constants.o
clavrx_olr_module.o: clavrx_olr_module.f90 constant.o pixel_common.o algorithm_constants.o
clavrx_sst_module.o: clavrx_sst_module.f90 constant.o pixel_common.o
calibration_constants.o: calibration_constants.f90 constant.o 
ahi_clavrx_bridge.o:ahi_clavrx_bridge.f90 cx_read_ahi_mod.o
cx_read_ahi_mod.o: cx_read_ahi_mod.f90 string_functions.o date_tools_mod.o file_tools.o geo_sat_navigation_mod.o
cx_pfaast_mod.o:$(PFAAST)/cx_pfaast_mod.f90 cx_pfaast_constants_mod.o cx_pfaast_coef_mod.o cx_pfaast_tools_mod.o
cx_pfaast_tools_mod.o:$(PFAAST)/cx_pfaast_tools_mod.f90 
cx_pfaast_coef_mod.o:$(PFAAST)/cx_pfaast_coef_mod.f90 strings.o
cx_pfaast_constants_mod.o:$(PFAAST)/cx_pfaast_constants_mod.f90
dncomp_clavrx_bridge_mod.o:dncomp_clavrx_bridge_mod.f90  dcomp_rtm_module.o clavrx_message_module.o
dcomp_rtm_module.o:dcomp_rtm_module.f90
dnb_retrievals_mod.o:dnb_retrievals_mod.f90 file_tools.o
cloud_height_routines.o: cloud_height_routines.f90 constant.o planck.o rtm_common.o	
clavrx_message_module.o: clavrx_message_module.f90 file_tools.o
cgms_nav.o: cgms_nav.f90
comp_asc_des_level2b.o: comp_asc_des_level2b.f90 constant.o hdf_params.o hdf.o level2b.o file_utility.o
drive_subset_level2b.o: drive_subset_level2b.f90 constant.o hdf_params.o hdf.o level2b.o file_utility.o
date_tools_mod.o: date_tools_mod.f90
file_tools.o: file_tools.f90
file_utility.o: file_utility.f90 constant.o
geo_sat_navigation_mod.o:geo_sat_navigation_mod.f90
goes_module.o: goes_module.f90 pixel_common.o viewing_geometry_module.o num_mod.o  file_utility.o avhrr_module.o
Message_Handler.o: Message_Handler.f90 file_utility.o constant.o
Compare_Float_Numbers.o: Compare_Float_Numbers.f90 constant.o
gfs_hdf_module.o: gfs_hdf_module.f90 constant.o sort_module.o num_mod.o nwp_common.o hdf.o clavrx_message_module.o
globsnow_read_routines.o: globsnow_read_routines.f90 constant.o hdf.o num_mod.o file_utility.o
hdf.o: hdf.f90
netcdf_read_module.o: netcdf_read_module.f90 constant.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(netcdflibs) netcdf_read_module.f90
precision.o:precision.f90
hdf_read_module.o: hdf_read_module.f90 hdf.o Compare_Float_Numbers.o constant.o file_utility.o Message_Handler.o clavrx_message_module.o
hdf_params.o: version.inc hdf_params.f90 hdf.o scaling_params.o constant.o
land_sfc_properties.o: land_sfc_properties.f90 constant.o hdf.o num_mod.o file_utility.o
laszlo_insolation_module.o: laszlo_insolation_module.f90 constant.o sasrab.o conver.o getmod.o pixel_common.o nwp_common.o
modis_module.o: modis_module.f90 constant.o hdf.o file_utility.o pixel_common.o pixel_routines.o planck.o file_utility.o viewing_geometry_module.o file_tools.o calibration_constants.o
iff_clavrx_bridge.o: iff_clavrx_bridge.f90 iff_module.o constant.o file_utility.o pixel_common.o pixel_routines.o planck.o viewing_geometry_module.o
iff_module.o: iff_module.f90 hdf.o pixel_common.o file_utility.o hdf_read_module.o 
mtsat_module.o: mtsat_module.f90 pixel_common.o constant.o num_mod.o cgms_nav.o goes_module.o get_lun.o file_utility.o avhrr_module.o
fy2_module.o: fy2_module.f90 pixel_common.o constant.o num_mod.o mtsat_module.o get_lun.o goes_module.o file_utility.o viewing_geometry_module.o
coms_module.o: coms_module.f90 pixel_common.o constant.o num_mod.o cgms_nav.o goes_module.o get_lun.o file_utility.o viewing_geometry_module.o
ncep_reanalysis.o: ncep_reanalysis.f90 constant.o hdf.o nwp_common.o sort_module.o num_mod.o
num_mod.o: num_mod.f90 constant.o
viewing_geometry_module.o: viewing_geometry_module.f90 constant.o
nwp_common.o: nwp_common.f90 pixel_common.o constant.o
level2.o: level2.f90 constant.o pixel_common.o hdf.o hdf_params.o scaling_params.o clavrx_message_module.o
level2b.o: level2b.f90 constant.o hdf.o hdf_params.o level2.o scaling_params.o
planck.o: planck.f90 constant.o calibration_constants.o pixel_common.o
reposition_module.o: reposition_module.f90 constant.o num_mod.o pixel_common.o reposnx.o
seviri_module.o: seviri_module.f90 pixel_common.o constant.o num_mod.o cgms_nav.o goes_module.o file_utility.o viewing_geometry_module.o
oca_module.o: oca_module.f90 hdf.o file_utility.o constant.o pixel_common.o file_tools.o
sfc_emiss.o: sfc_emiss.f90 constant.o num_mod.o
scaling_params.o: scaling_params.f90 constant.o
sfc_prop_umd.o: sfc_prop_umd.f90 pixel_common.o constant.o
sort_module.o: sort_module.f90
string_functions.o:string_functions.f90
strings.o:strings.f90 precision.o
simple_cod_module.o: simple_cod_module.f90 constant.o pixel_common.o num_mod.o file_utility.o sfc_prop_umd.o
rt_utils.o: rt_utils.f90 rtm_common.o pixel_common.o nwp_common.o constant.o cx_pfaast_mod.o calibration_constants.o

#sensor
ifdef hdf5libs
readh5dataset.o: readh5dataset.f90
viirs_clavrx_bridge.o: viirs_clavrx_bridge.f90 readh5dataset.o file_tools.o clavrx_message_module.o viirs_read_mod.o
viirs_read_mod.o: viirs_read_mod.f90 file_tools.o readh5dataset.o
viirs_nasa_read_module.o: viirs_nasa_read_module.f90 file_tools.o pixel_common.o constant.o readh5dataset.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(hdf5libs)  viirs_nasa_read_module.f90
sensor_module.o: sensor_module.f90 constant.o pixel_common.o avhrr_module.o goes_module.f90 modis_module.o fy2_module.o viirs_clavrx_bridge.o viirs_nasa_read_module.o seviri_module.o coms_module.o iff_clavrx_bridge.o algorithm_constants.o ahi_clavrx_bridge.o 
	$(fc) -c $(fflags) $(fflags_clavr) ${hdf5libs} $(cpp) sensor_module.f90 
else
sensor_module.o: sensor_module.f90 constant.o pixel_common.o avhrr_module.o goes_module.f90 modis_module.o fy2_module.o viirs_nasa_read_module.o seviri_module.o coms_module.o iff_clavrx_bridge.o algorithm_constants.o clavrx_message_module.o date_tools_mod.o cx_read_ahi_mod.o
	$(fc) -c $(fflags) $(cppflags) $(cppflags_vcld) $(cpp) sensor_module.f90
endif

#cloud t&m
cloud_type_bridge_module.o:$(CTYPE)/cloud_type_bridge_module.f90 constant.o pixel_common.o cloud_type_algo_module.o  rtm_common.o nb_cloud_mask_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(netcdflibs)   $(CTYPE)/cloud_type_bridge_module.f90
cloud_type_algo_module.o:$(CTYPE)/cloud_type_algo_module.f90 constant.o pixel_common.o
nb_cloud_mask_clavrx_bridge_module.o: $(CMASK)/nb_cloud_mask_clavrx_bridge_module.f90 pixel_common.o num_mod.o nb_cloud_mask_clavrx_services_module.o nb_cloud_mask_module.o nb_cloud_mask_addons_module.o file_tools.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(netcdflibs)  $(CMASK)/nb_cloud_mask_clavrx_bridge_module.f90
nb_cloud_mask_clavrx_services_module.o: $(CMASK)/nb_cloud_mask_clavrx_services_module.f90

nb_cloud_mask_module.o: $(CMASK)/nb_cloud_mask_module.f90 nb_cloud_mask_clavrx_services_module.o netcdf_read_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(netcdflibs) $(CMASK)/nb_cloud_mask_module.f90

nb_cloud_mask_addons_module.o: $(CMASK)/nb_cloud_mask_addons_module.f90 nb_cloud_mask_clavrx_services_module.o
	$(fc) -c $(fflags) $(cppflags) $(cpp) $(CLAVRX_ID_FLAG) $(netcdflibs) $(CMASK)/nb_cloud_mask_addons_module.f90

#universal_cloud_type.o:$(CTYPE)/universal_cloud_type.f90 constant.o pixel_common.o
ir_cloud_type_baum_module.o: ir_cloud_type_baum_module.f90 constant.o pixel_common.o

baseline_cloud_mask.o: $(BASELINEMASK)/baseline_cloud_mask.f90 pixel_common.o constant.o nwp_common.o rtm_common.o planck.o clavrx_message_module.o calibration_constants.o

sub_routine = constant.o pixel_common.o pixel_routines.o clavrx_sst_module.o clavrx_sst_module.o clavrx_olr_module.o gfs_hdf_module.o \
              avhrr_module.o sensor_module.o user_options.o oisst_analysis.o \
              sfc_prop_umd.o sfc_emiss.o ir_cloud_type_baum_module.o cloud_type_bridge_module.o \
              land_sfc_properties.o file_utility.o level2.o cloud_height_routines.o \
              dncomp_clavrx_bridge_mod.o \
              clavrx_message_module.o avhrr_pixel_aerosol.o hdf.o hdf_params.o dnb_retrievals_mod.o \
              sort_module.o calibration_constants.o algorithm_constants.o  \
              acha_clavrx_bridge_module.o cloud_base_clavrx_bridge_module.o \
              ccl_clavrx_bridge_module.o asos_clavrx_bridge_module.o \
              nb_cloud_mask_clavrx_bridge_module.o baseline_cloud_mask.o ncep_reanalysis.o date_tools_mod.o \
              rt_utils.o rtm_common.o reposnx.o reposition_module.o cx_read_ahi_mod.o \
              modis_module.o iff_clavrx_bridge.f90 iff_module.o fy2_module.o goes_module.o globsnow_read_routines.o \
              laszlo_insolation_module.o sasrab.o conver.o \
              seviri_module.o oca_module.o mtsat_module.o simple_cod_module.o clavrx_message_module.o \
              coms_module.o level2b.o dcomp_rtm_module.o dcomp_derived_products_module.o  



ifdef hdf5libs
     sub_routine += viirs_clavrx_bridge.o readh5dataset.o viirs_read_mod.o viirs_nasa_read_module.o
endif

process_clavrx.o: process_clavrx.f90 $(sub_routine)
	$(fc) -c $(fflags) $(cppflags) $(fflags_clavr) $(cppflags_vcld) $(cpp) ${hdf5libs} $(netcdflibs) process_clavrx.f90 


######### .o files that depend on .inc files ########
level2.o: level2.inc

########################### PFAST ##############################################
sasrab.o : sasrab.f conver.o get_lun.o
	        $(fc) -c $(fflags_sasrab_f77) $(SASRAB)/sasrab.f 

conver.o : conver.f90
	        $(fc) -c $(fflags_sasrab_f90) $(SASRAB)/conver.f90

getmod.o : getmod.f90
	        $(fc) -c $(fflags_sasrab_f90) $(SASRAB)/getmod.f90

big_endian.o : big_endian.f
	        $(fc) -c $(fflags_pfast) big_endian.f

get_lun.o : get_lun.f90
	        $(fc) -c $(fflags) get_lun.f90

flip_rtc.o : flip_rtc.f
	$(fc) -c $(fflags_pfast) flip_rtc.f

re4flip.o : re4flip.f
	$(fc) -c $(fflags_pfast) re4flip.f

################ hdf 5 read routines Code
ifdef hdf5libs
readh5dataset.o: readh5dataset.f90
	$(fc) -c $(ldlags)  ${hdf5libs} readh5dataset.f90
endif	
###############  Fred Nagle Repositioning Code

reposnx.o : reposnx.f
	$(fc) -c $(fflags_pfast) reposnx.f	

################## VIIRS ###################
ifdef hdf5libs
viirs_clavrx_bridge.mod viirs_clavrx_bridge.o: viirs_clavrx_bridge.f90 \
               constants.mod hdf.mod avhrr_module.mod file_utility.mod pixel_common.mod pixel_routines.mod  planck.mod
	$(fc) -c $(fflags) ${hdf5libs} viirs_clavrx_bridge.f90 
viirs_read_mod.mod viirs_read_mod.o: viirs_read_mod.f90
	$(fc) -c $(fflags) ${hdf5libs} viirs_read_mod.f90  

endif

############### C Code

mreadf.o: mreadf.c
	$(CC) -c -O2 mreadf.c

move_bytes.o: move_bytes.c
	$(CC) -c -O2 move_bytes.c

geos_transform_pix.o: geos_transform_pix.c
	$(CC) -c -O2 geos_transform_pix.c

################################ Misc. Targets #################################

# This target deletes all object and module files from the current directory as well
# as the file version.inc, which is created during the make process.
clean:
	-rm -f *.o *.mod version.inc
	$(MAKE) clean -C $(DNCOMP) 

# This target also removes all the executables.
distclean: clean
	-rm ../clavrx_bin/clavrxorb ../clavrx_bin/comp_asc_des_level2b ../clavrx_bin/drive_subset_level2b 

#------------------------------------------------------------------------
# To put all necessary files in one file ready for distribution,
# make sure the value for VERSION (at top of this file) is correct.
# then, type:
# make tardist
# If you add/change files to the distribution that don't end with 
# .c, .f, .f90, .inc, or .txt, you must change/add to the list below.

THEDATE=`/bin/date +%Y%m%d`

tardist:
	- tar -cvf ../clavrx_$(VERSION)_$(THEDATE).tar \
  ../akh_acha_repo            ../grib2hdf \
  ../akh_clavrx_src/configure \
  ../akh_clavrx_src/Makefile ../akh_clavrx_src/*.c   ../akh_clavrx_src/*.f \
  ../akh_clavrx_src/*.f90    ../akh_clavrx_src/*.inc ../akh_clavrx_src/*.txt 
	gzip ../clavrx_$(VERSION)_$(THEDATE).tar
	echo "created ../clavrx_$(VERSION)_$(THEDATE).tar.gz"
#the end of the makefile
